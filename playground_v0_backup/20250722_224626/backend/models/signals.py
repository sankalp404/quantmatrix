from sqlalchemy import Column, Integer, String, Float, DateTime, Boolean, Text, ForeignKey, Enum, Index, JSON
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
import enum
from backend.models import Base

class SignalType(enum.Enum):
    ENTRY = "entry"
    EXIT = "exit"
    SCALE_OUT = "scale_out"
    STOP_LOSS = "stop_loss"
    ALERT = "alert"

class SignalStatus(enum.Enum):
    PENDING = "pending"
    ACTIVE = "active"
    TRIGGERED = "triggered"
    EXPIRED = "expired"
    CANCELLED = "cancelled"

class StrategyType(enum.Enum):
    ATR_MATRIX = "atr_matrix"
    MOMENTUM = "momentum"
    MEAN_REVERSION = "mean_reversion"
    CUSTOM = "custom"

class NotificationType(enum.Enum):
    SIGNAL = "signal"
    ALERT = "alert"
    PORTFOLIO_UPDATE = "portfolio_update"
    STRATEGY_RESULT = "strategy_result"
    REBALANCE = "rebalance"
    MARGIN_CALL = "margin_call"

class Strategy(Base):
    """Strategy definitions and configurations."""
    __tablename__ = "strategies"
    
    id = Column(Integer, primary_key=True)
    name = Column(String(100), nullable=False, unique=True)
    description = Column(Text)
    strategy_type = Column(Enum(StrategyType), nullable=False)
    
    # Strategy parameters (JSON)
    parameters = Column(JSON)  # Store strategy-specific parameters
    
    # Execution settings
    is_active = Column(Boolean, default=True)
    auto_execute = Column(Boolean, default=False)
    max_positions = Column(Integer, default=10)
    position_size_pct = Column(Float, default=2.0)  # % of portfolio per position
    
    # Universe settings
    universe_filter = Column(JSON)  # Screening criteria
    
    # Risk management
    max_risk_per_trade = Column(Float, default=2.0)  # % of portfolio
    stop_loss_pct = Column(Float, default=8.0)
    take_profit_pct = Column(Float, default=20.0)
    
    # Scheduling
    run_frequency = Column(String(50), default="daily")  # daily, weekly, on_demand
    last_run = Column(DateTime)
    next_run = Column(DateTime)
    
    created_at = Column(DateTime, server_default=func.now())
    updated_at = Column(DateTime, server_default=func.now(), onupdate=func.now())
    
    # Relationships
    strategy_runs = relationship("StrategyRun", back_populates="strategy")
    signals = relationship("Signal", back_populates="strategy")

class StrategyRun(Base):
    """Results of strategy executions."""
    __tablename__ = "strategy_runs"
    
    id = Column(Integer, primary_key=True)
    strategy_id = Column(Integer, ForeignKey("strategies.id"), nullable=False)
    run_date = Column(DateTime, nullable=False)
    
    # Execution details
    universe_size = Column(Integer)  # Number of stocks scanned
    signals_generated = Column(Integer)  # Number of signals created
    execution_time_ms = Column(Integer)  # Execution time in milliseconds
    
    # Results summary
    top_opportunities = Column(JSON)  # Top signals/opportunities found
    market_conditions = Column(JSON)  # Market context at time of run
    parameters_used = Column(JSON)  # Parameters used for this run
    
    # Performance tracking
    success_rate = Column(Float)  # % of signals that were profitable
    avg_return = Column(Float)  # Average return of signals from this run
    max_return = Column(Float)
    min_return = Column(Float)
    
    # Status
    status = Column(String(20), default="completed")  # completed, failed, running
    error_message = Column(Text)
    
    created_at = Column(DateTime, server_default=func.now())
    
    # Relationships
    strategy = relationship("Strategy", back_populates="strategy_runs")
    signals = relationship("Signal", back_populates="strategy_run")
    
    # Indexes
    __table_args__ = (
        Index('idx_strategy_run_date', 'strategy_id', 'run_date'),
        Index('idx_run_date', 'run_date'),
    )

class Signal(Base):
    """Trading signals generated by strategies."""
    __tablename__ = "signals"
    
    id = Column(Integer, primary_key=True)
    strategy_id = Column(Integer, ForeignKey("strategies.id"), nullable=False)
    strategy_run_id = Column(Integer, ForeignKey("strategy_runs.id"), nullable=False)
    symbol = Column(String(20), nullable=False)
    
    # Signal details
    signal_type = Column(Enum(SignalType), nullable=False)
    signal_strength = Column(Float)  # 0.0 to 1.0 confidence score
    generated_at = Column(DateTime, nullable=False)
    expires_at = Column(DateTime)
    
    # Price levels
    entry_price = Column(Float, nullable=False)
    current_price = Column(Float, nullable=False)
    stop_loss = Column(Float)
    take_profit = Column(Float)
    targets = Column(JSON)  # Multiple target levels
    
    # Strategy-specific metrics
    atr_distance = Column(Float)
    rsi = Column(Float)
    ma_alignment = Column(Boolean)
    risk_reward_ratio = Column(Float)
    time_horizon = Column(String(50))  # "1-3 days", "1-2 weeks", etc.
    
    # Company information
    company_name = Column(String(200))
    company_synopsis = Column(Text)
    sector = Column(String(50))
    market_cap = Column(Float)
    market_cap_category = Column(String(20))
    
    # Performance tracking
    status = Column(Enum(SignalStatus), default=SignalStatus.PENDING)
    max_price_reached = Column(Float)
    min_price_reached = Column(Float)
    actual_return = Column(Float)
    days_active = Column(Integer, default=0)
    
    # Execution tracking
    is_executed = Column(Boolean, default=False)
    execution_price = Column(Float)
    execution_date = Column(DateTime)
    quantity_executed = Column(Float)
    
    # Analysis
    signal_accuracy = Column(Float)  # Did it reach targets?
    lessons_learned = Column(Text)
    
    created_at = Column(DateTime, server_default=func.now())
    updated_at = Column(DateTime, server_default=func.now(), onupdate=func.now())
    
    # Relationships
    strategy = relationship("Strategy", back_populates="signals")
    strategy_run = relationship("StrategyRun", back_populates="signals")
    
    # Indexes
    __table_args__ = (
        Index('idx_symbol_date', 'symbol', 'generated_at'),
        Index('idx_strategy_symbol', 'strategy_id', 'symbol'),
        Index('idx_signal_type_status', 'signal_type', 'status'),
        Index('idx_generated_at', 'generated_at'),
    )

class Notification(Base):
    """In-app notifications and alerts."""
    __tablename__ = "notifications"
    
    id = Column(Integer, primary_key=True)
    notification_type = Column(Enum(NotificationType), nullable=False)
    title = Column(String(200), nullable=False)
    message = Column(Text, nullable=False)
    
    # Targeting
    account_id = Column(Integer, ForeignKey("accounts.id"))
    symbol = Column(String(20))  # Related symbol if applicable
    
    # Content
    data = Column(JSON)  # Additional data (signal details, portfolio metrics, etc.)
    action_url = Column(String(500))  # URL to navigate to
    action_label = Column(String(100))  # Button text
    
    # Display settings
    priority = Column(String(20), default="medium")  # low, medium, high, critical
    color = Column(String(10))  # Hex color for UI
    icon = Column(String(50))  # Icon name for UI
    
    # Status
    is_read = Column(Boolean, default=False)
    is_dismissed = Column(Boolean, default=False)
    read_at = Column(DateTime)
    
    # Discord integration
    sent_to_discord = Column(Boolean, default=False)
    discord_message_id = Column(String(100))
    discord_channel = Column(String(50))
    
    # Expiration
    expires_at = Column(DateTime)
    auto_dismiss = Column(Boolean, default=False)
    
    created_at = Column(DateTime, server_default=func.now())
    updated_at = Column(DateTime, server_default=func.now(), onupdate=func.now())
    
    # Relationships
    account = relationship("Account")
    
    # Indexes
    __table_args__ = (
        Index('idx_account_type', 'account_id', 'notification_type'),
        Index('idx_priority_created', 'priority', 'created_at'),
        Index('idx_symbol_created', 'symbol', 'created_at'),
        Index('idx_is_read', 'is_read'),
    )

class MarketDataCache(Base):
    """Cache for market data to reduce API calls."""
    __tablename__ = "market_data_cache"
    
    id = Column(Integer, primary_key=True)
    symbol = Column(String(20), nullable=False)
    data_type = Column(String(50), nullable=False)  # price, technical, company_info
    
    # Data
    data = Column(JSON, nullable=False)
    
    # Cache metadata
    expires_at = Column(DateTime, nullable=False)
    api_source = Column(String(50))  # Which API provided this data
    cache_hits = Column(Integer, default=0)
    
    created_at = Column(DateTime, server_default=func.now())
    updated_at = Column(DateTime, server_default=func.now(), onupdate=func.now())
    
    # Indexes
    __table_args__ = (
        Index('idx_symbol_type', 'symbol', 'data_type', unique=True),
        Index('idx_expires_at', 'expires_at'),
    ) 