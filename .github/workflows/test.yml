name: QuantMatrix Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: quantmatrix_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ../requirements.txt
        pip install pytest pytest-asyncio requests

    - name: Set up test environment
      run: |
        cp ../env.example .env.test
        sed -i 's/localhost/postgres/g' .env.test
        
    - name: Run simple tests
      run: |
        chmod +x test_simple.py
        python test_simple.py
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/quantmatrix_test
        REDIS_URL: redis://localhost:6379
        TESTING: true

    - name: Run API tests (if server available)
      run: |
        # Start a test server in the background
        python -m uvicorn api.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        # Run API tests
        python test_simple.py || echo "API tests failed - server might not be running"
      continue-on-error: true

  frontend-tests:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Check TypeScript compilation
      run: npm run build

    - name: Run linting
      run: npm run lint || echo "Linting issues found"
      continue-on-error: true

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Python security scan
      run: |
        pip install safety bandit
        safety check -r requirements.txt || echo "Security issues found"
        bandit -r backend/ -f json || echo "Security scan completed with warnings"
      continue-on-error: true

  notify-status:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: always()
    steps:
    - name: Report Results
      run: |
        echo "üß™ Test Results Summary:"
        echo "Backend Tests: ${{ needs.backend-tests.result }}"
        echo "Frontend Tests: ${{ needs.frontend-tests.result }}"
        
        if [[ "${{ needs.backend-tests.result }}" == "success" && "${{ needs.frontend-tests.result }}" == "success" ]]; then
          echo "‚úÖ All tests passed!"
        else
          echo "‚ùå Some tests failed - check logs above"
        fi 