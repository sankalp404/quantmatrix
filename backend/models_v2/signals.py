"""
Signals & Notifications Models - V2 Enhanced
============================================

Preserves existing sophisticated signal generation and Discord integration
while adding multi-user support and enhanced notification management.
"""

from sqlalchemy import (
    Column, Integer, String, DateTime, Boolean, Text, 
    ForeignKey, UniqueConstraint, Index, CheckConstraint,
    TIMESTAMP, Enum as SQLEnum, JSON, DECIMAL
)
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from datetime import datetime
import enum

from . import Base

# =============================================================================
# ENUMS
# =============================================================================

class SignalType(enum.Enum):
    ENTRY = "entry"
    EXIT = "exit"
    SCALE_OUT = "scale_out"
    STOP_LOSS = "stop_loss"
    TAKE_PROFIT = "take_profit"
    ALERT = "alert"
    RISK_WARNING = "risk_warning"

class SignalStatus(enum.Enum):
    PENDING = "pending"
    ACTIVE = "active"
    TRIGGERED = "triggered"
    EXPIRED = "expired"
    CANCELLED = "cancelled"
    FILLED = "filled"

class NotificationType(enum.Enum):
    SIGNAL = "signal"
    ALERT = "alert"
    PORTFOLIO_UPDATE = "portfolio_update"
    STRATEGY_RESULT = "strategy_result"
    REBALANCE = "rebalance"
    MARGIN_CALL = "margin_call"
    NEWS = "news"
    EARNINGS = "earnings"
    MARKET_UPDATE = "market_update"

class NotificationPriority(enum.Enum):
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"

class DiscordChannel(enum.Enum):
    SIGNALS = "signals"
    PORTFOLIO_DIGEST = "portfolio_digest"
    MORNING_BREW = "morning_brew"
    PLAYGROUND = "playground"
    SYSTEM_STATUS = "system_status"
    ALERTS = "alerts"

# =============================================================================
# TRADING SIGNALS
# =============================================================================

class Signal(Base):
    """Trading signals generated by strategies."""
    __tablename__ = "signals_v2"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    strategy_id = Column(Integer, ForeignKey("strategies_v2.id"), nullable=False)
    strategy_run_id = Column(Integer, ForeignKey("strategy_runs_v2.id"), nullable=False)
    user_id = Column(Integer, ForeignKey("users_v2.id"), nullable=False)
    instrument_id = Column(Integer, ForeignKey("instruments_v2.id"), nullable=False)
    
    # Signal Identification
    symbol = Column(String(20), nullable=False, index=True)
    signal_type = Column(SQLEnum(SignalType), nullable=False)
    status = Column(SQLEnum(SignalStatus), default=SignalStatus.PENDING)
    
    # Signal Strength & Confidence
    signal_strength = Column(DECIMAL(4, 3), nullable=False)  # 0.000 to 1.000
    confidence_score = Column(DECIMAL(4, 3), nullable=False)
    
    # Timing
    generated_at = Column(TIMESTAMP(timezone=True), server_default=func.now())
    expires_at = Column(TIMESTAMP(timezone=True))
    triggered_at = Column(TIMESTAMP(timezone=True))
    
    # Price Levels
    entry_price = Column(DECIMAL(12, 4), nullable=False)
    current_price = Column(DECIMAL(12, 4), nullable=False)
    stop_loss = Column(DECIMAL(12, 4))
    take_profit = Column(DECIMAL(12, 4))
    targets = Column(JSON)  # Array of target prices: [target1, target2, target3]
    
    # Strategy-Specific Metrics
    atr_distance = Column(DECIMAL(8, 4))
    rsi = Column(DECIMAL(6, 2))
    ma_alignment = Column(Boolean)
    risk_reward_ratio = Column(DECIMAL(6, 2))
    time_horizon = Column(String(50))  # "1-3 days", "1-2 weeks", etc.
    time_horizon_days = Column(Integer)
    
    # Position Sizing
    recommended_position_size = Column(DECIMAL(15, 2))  # Dollar amount
    recommended_shares = Column(Integer)
    max_risk_per_trade = Column(DECIMAL(5, 2))  # % of portfolio
    
    # Company Information (cached for quick access)
    company_name = Column(String(200))
    company_synopsis = Column(Text)
    sector = Column(String(50))
    industry = Column(String(100))
    market_cap = Column(DECIMAL(20, 2))
    market_cap_category = Column(String(20))  # mega, large, mid, small, micro
    
    # Performance Tracking
    max_price_reached = Column(DECIMAL(12, 4))
    min_price_reached = Column(DECIMAL(12, 4))
    actual_return = Column(DECIMAL(8, 4))  # Actual % return achieved
    days_active = Column(Integer, default=0)
    
    # Execution Tracking
    is_executed = Column(Boolean, default=False)
    execution_price = Column(DECIMAL(12, 4))
    execution_date = Column(TIMESTAMP(timezone=True))
    quantity_executed = Column(DECIMAL(15, 6))
    
    # Analysis & Learning
    signal_accuracy = Column(DECIMAL(4, 3))  # How accurate was the signal?
    hit_target_1 = Column(Boolean, default=False)
    hit_target_2 = Column(Boolean, default=False)
    hit_target_3 = Column(Boolean, default=False)
    hit_stop_loss = Column(Boolean, default=False)
    lessons_learned = Column(Text)
    
    # Notification Tracking
    notification_sent = Column(Boolean, default=False)
    discord_sent = Column(Boolean, default=False)
    discord_message_id = Column(String(100))
    discord_channel = Column(SQLEnum(DiscordChannel))
    
    # Analysis Data (JSON for strategy-specific data)
    technical_analysis = Column(JSON)
    fundamental_analysis = Column(JSON)
    market_conditions = Column(JSON)
    signal_metadata = Column(JSON)  # Additional strategy-specific data
    
    # Audit
    created_at = Column(TIMESTAMP(timezone=True), server_default=func.now())
    updated_at = Column(TIMESTAMP(timezone=True), server_default=func.now(), onupdate=func.now())
    
    # Relationships
    strategy = relationship("Strategy", back_populates="signals")
    strategy_run = relationship("StrategyRun", back_populates="signals")
    user = relationship("User", back_populates="signals")
    notifications = relationship("Notification", back_populates="signal", cascade="all, delete-orphan")
    
    __table_args__ = (
        Index('idx_user_symbol_date', 'user_id', 'symbol', 'generated_at'),
        Index('idx_strategy_symbol', 'strategy_id', 'symbol'),
        Index('idx_signal_type_status', 'signal_type', 'status'),
        Index('idx_generated_at', 'generated_at'),
        Index('idx_expires_at', 'expires_at'),
        Index('idx_confidence_strength', 'confidence_score', 'signal_strength'),
        CheckConstraint('signal_strength >= 0 AND signal_strength <= 1', name='ck_signal_strength_valid'),
        CheckConstraint('confidence_score >= 0 AND confidence_score <= 1', name='ck_confidence_valid'),
    )

# =============================================================================
# NOTIFICATIONS & ALERTS
# =============================================================================

class Notification(Base):
    """In-app notifications and external alerts."""
    __tablename__ = "notifications_v2"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(Integer, ForeignKey("users_v2.id"), nullable=False)
    signal_id = Column(Integer, ForeignKey("signals_v2.id"))  # Optional link to signal
    
    # Notification Content
    notification_type = Column(SQLEnum(NotificationType), nullable=False)
    title = Column(String(200), nullable=False)
    message = Column(Text, nullable=False)
    summary = Column(String(500))  # Short summary for mobile/email
    
    # Targeting & Context
    symbol = Column(String(20))  # Related symbol if applicable
    strategy_name = Column(String(100))  # Related strategy if applicable
    
    # Rich Content
    data = Column(JSON)  # Additional structured data
    chart_url = Column(String(500))  # URL to chart/image
    action_url = Column(String(500))  # URL to navigate to
    action_label = Column(String(100))  # Button text ("View Details", "Execute Trade")
    
    # Display Settings
    priority = Column(SQLEnum(NotificationPriority), default=NotificationPriority.MEDIUM)
    color = Column(String(10))  # Hex color for UI (#1e40af)
    icon = Column(String(50))  # Icon name for UI (trend-up, alert-triangle)
    
    # User Interaction
    is_read = Column(Boolean, default=False)
    is_dismissed = Column(Boolean, default=False)
    is_archived = Column(Boolean, default=False)
    read_at = Column(TIMESTAMP(timezone=True))
    dismissed_at = Column(TIMESTAMP(timezone=True))
    
    # Delivery Status
    delivered_in_app = Column(Boolean, default=True)
    delivered_email = Column(Boolean, default=False)
    delivered_discord = Column(Boolean, default=False)
    delivered_sms = Column(Boolean, default=False)
    
    # Discord Integration
    discord_channel = Column(SQLEnum(DiscordChannel))
    discord_message_id = Column(String(100))
    discord_thread_id = Column(String(100))
    discord_webhook_url = Column(String(500))
    discord_retry_count = Column(Integer, default=0)
    discord_last_attempt = Column(TIMESTAMP(timezone=True))
    
    # Email Integration
    email_sent = Column(Boolean, default=False)
    email_subject = Column(String(255))
    email_template = Column(String(100))
    email_retry_count = Column(Integer, default=0)
    
    # Expiration & Cleanup
    expires_at = Column(TIMESTAMP(timezone=True))
    auto_dismiss = Column(Boolean, default=False)
    auto_archive_days = Column(Integer, default=30)
    
    # Performance Tracking
    view_count = Column(Integer, default=0)
    click_count = Column(Integer, default=0)  # Action button clicks
    last_viewed_at = Column(TIMESTAMP(timezone=True))
    
    # Error Handling
    delivery_errors = Column(JSON)  # Array of delivery error messages
    retry_after = Column(TIMESTAMP(timezone=True))  # When to retry failed delivery
    
    # Audit
    created_at = Column(TIMESTAMP(timezone=True), server_default=func.now())
    updated_at = Column(TIMESTAMP(timezone=True), server_default=func.now(), onupdate=func.now())
    
    # Relationships
    user = relationship("User", back_populates="notifications")
    signal = relationship("Signal", back_populates="notifications")
    
    __table_args__ = (
        Index('idx_user_type', 'user_id', 'notification_type'),
        Index('idx_priority_created', 'priority', 'created_at'),
        Index('idx_symbol_created', 'symbol', 'created_at'),
        Index('idx_unread', 'user_id', 'is_read', 'created_at'),
        Index('idx_discord_delivery', 'delivered_discord', 'discord_retry_count'),
        Index('idx_expires_at', 'expires_at'),
    )

# =============================================================================
# ALERT RULES & AUTOMATION
# =============================================================================

class AlertRule(Base):
    """User-defined alert rules for automated notifications."""
    __tablename__ = "alert_rules_v2"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(Integer, ForeignKey("users_v2.id"), nullable=False)
    
    # Rule Configuration
    name = Column(String(200), nullable=False)
    description = Column(Text)
    is_active = Column(Boolean, default=True)
    
    # Trigger Conditions (JSON for flexibility)
    conditions = Column(JSON, nullable=False)  # Complex condition logic
    
    # Examples of condition structures:
    # Price alerts: {"type": "price", "symbol": "AAPL", "operator": ">", "value": 150}
    # ATR alerts: {"type": "atr_distance", "operator": "<", "value": 2}
    # Portfolio alerts: {"type": "portfolio_value", "operator": "change_pct", "value": -5}
    
    # Alert Settings
    alert_frequency = Column(String(20), default="once")  # once, daily, always
    cooldown_minutes = Column(Integer, default=60)  # Minimum time between alerts
    max_alerts_per_day = Column(Integer, default=10)
    
    # Notification Preferences
    notify_in_app = Column(Boolean, default=True)
    notify_email = Column(Boolean, default=False)
    notify_discord = Column(Boolean, default=True)
    notify_sms = Column(Boolean, default=False)
    discord_channel = Column(SQLEnum(DiscordChannel), default=DiscordChannel.ALERTS)
    
    # Priority & Display
    priority = Column(SQLEnum(NotificationPriority), default=NotificationPriority.MEDIUM)
    custom_message = Column(Text)  # Custom message template
    
    # Execution Tracking
    last_triggered_at = Column(TIMESTAMP(timezone=True))
    trigger_count = Column(Integer, default=0)
    total_notifications_sent = Column(Integer, default=0)
    
    # Performance
    false_positive_count = Column(Integer, default=0)  # User-marked as wrong
    usefulness_score = Column(DECIMAL(3, 2))  # User feedback on usefulness
    
    # Audit
    created_at = Column(TIMESTAMP(timezone=True), server_default=func.now())
    updated_at = Column(TIMESTAMP(timezone=True), server_default=func.now(), onupdate=func.now())
    
    # Relationships
    user = relationship("User", back_populates="alert_rules")
    
    __table_args__ = (
        UniqueConstraint('user_id', 'name', name='uq_user_alert_name'),
        Index('idx_user_active', 'user_id', 'is_active'),
        Index('idx_last_triggered', 'last_triggered_at'),
    )

# =============================================================================
# DISCORD INTEGRATION
# =============================================================================

class DiscordWebhook(Base):
    """Discord webhook configurations for different channels."""
    __tablename__ = "discord_webhooks_v2"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(Integer, ForeignKey("users_v2.id"))  # NULL for system-wide webhooks
    
    # Webhook Configuration
    channel = Column(SQLEnum(DiscordChannel), nullable=False)
    webhook_url = Column(String(500), nullable=False)
    webhook_name = Column(String(100))
    
    # Settings
    is_active = Column(Boolean, default=True)
    is_system_wide = Column(Boolean, default=False)  # Available to all users
    
    # Message Formatting
    message_template = Column(Text)  # Custom message template
    embed_color = Column(String(10))  # Hex color for embeds
    include_charts = Column(Boolean, default=True)
    include_analysis = Column(Boolean, default=True)
    
    # Rate Limiting
    rate_limit_per_minute = Column(Integer, default=10)
    rate_limit_per_hour = Column(Integer, default=100)
    
    # Performance Tracking
    messages_sent_today = Column(Integer, default=0)
    messages_sent_total = Column(Integer, default=0)
    last_message_sent = Column(TIMESTAMP(timezone=True))
    last_error = Column(Text)
    success_rate = Column(DECIMAL(5, 2), default=100.0)
    
    # Error Handling
    consecutive_failures = Column(Integer, default=0)
    is_failing = Column(Boolean, default=False)
    disabled_until = Column(TIMESTAMP(timezone=True))
    
    # Audit
    created_at = Column(TIMESTAMP(timezone=True), server_default=func.now())
    updated_at = Column(TIMESTAMP(timezone=True), server_default=func.now(), onupdate=func.now())
    
    # Relationships
    user = relationship("User", back_populates="discord_webhooks")
    
    __table_args__ = (
        UniqueConstraint('user_id', 'channel', name='uq_user_discord_channel'),
        Index('idx_channel_active', 'channel', 'is_active'),
        Index('idx_system_wide', 'is_system_wide', 'is_active'),
    ) 